import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
import P1FEM_periodicConditions



#######################################################################################
#                                   Generate mesh 
#######################################################################################

# choose mesh size
Nx=15
Ny=15
Lx=1.0
Ly=1.0

# Generate a uniform mesh
Points,Elements,periodicPairs=P1FEM_periodicConditions.uniformTriangulation_Torus(Nx,Ny,Lx,Ly)




#######################################################################################
#                                 First Test: Sin Sin
#######################################################################################



# define true solution (boundary conditions are clearly satisfied)
def SinSin(X,Y):
    return np.sin(2*np.pi*X)*np.sin(2*np.pi*Y)+1

#define its - Delta SinCos
def LaplacianSinSin(X,Y) :
    return ((2*np.pi)**2) * 2 * np.sin(2*np.pi*X)*np.sin(2*np.pi*Y)


# instantiate Laplacian of the true solution
f=LaplacianSinSin

# compute the true solution on the grid points
trueValsNodes=SinSin(Points[:,0],Points[:,1])

SinSinMean=0
# compute true mean
for i in range(np.shape(Elements)[0]):
    # retrieve the coordinates of the nodes of the i-th element
    # Nodes must be ordered counter clockwise!
    nodesidx = Elements[i,0:3]
    nodes=Points[nodesidx,:]
    #compute element area
    P = np.vstack(([1,1,1],np.transpose(nodes)))
    areaT = np.linalg.det(P)/2 
    sT = np.array(nodes).sum(axis=0)/3
    #update mean approximation
    SinSinMean+=areaT * SinSin(sT[0],sT[1])#/3


# plot true solution
fig=plt.figure(1)
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_trisurf(Points[:,0], Points[:,1], trueValsNodes, cmap=cm.jet, linewidth=0)
fig.colorbar(surf)
ax.xaxis.set_major_locator(MaxNLocator(5))
ax.yaxis.set_major_locator(MaxNLocator(6))
ax.zaxis.set_major_locator(MaxNLocator(5))
plt.title("True SinSin\nMean: "+str(SinSinMean))
fig.tight_layout()


#---------------------------------------------------------
#                   with centralization
#---------------------------------------------------------

# compute approximation u of SinCos by solving the Laplace equation
# with the right hand side given by the Laplacian of SinCos
u=P1FEM_periodicConditions.solveLaplace_Torus(Points,Elements,periodicPairs,f,gridType='general',centralization='On',umean=SinSinMean)

# plot approximate solution
fig=plt.figure(2)
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_trisurf(Points[:,0], Points[:,1], u, cmap=cm.jet, linewidth=0)
fig.colorbar(surf)
ax.xaxis.set_major_locator(MaxNLocator(5))
ax.yaxis.set_major_locator(MaxNLocator(6))
ax.zaxis.set_major_locator(MaxNLocator(5))
plt.title("approximate solution\nwith centralization")
fig.tight_layout()

# Error metrics
firstTriangle= Points[Elements[1,0:3],:]
areaUniform= np.linalg.det(np.vstack(([1,1,1],np.transpose(firstTriangle))))/2
Err=np.linalg.norm(u-trueValsNodes)*np.sqrt(areaUniform)
relErr=np.linalg.norm(u-trueValsNodes)/np.linalg.norm(trueValsNodes)
locErr=np.absolute(u-trueValsNodes)
print("\n\nErrors with centralization\n","Element area:",areaUniform,"\nEuclidean error: ",Err,"\nRelative error: ",relErr,"\nMax. loc. error: ",np.max(locErr),"\n")

# plot local error
fig=plt.figure(3)
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_trisurf(Points[:,0], Points[:,1],locErr , cmap=cm.jet, linewidth=0)
fig.colorbar(surf)
ax.xaxis.set_major_locator(MaxNLocator(5))
ax.yaxis.set_major_locator(MaxNLocator(6))
ax.zaxis.set_major_locator(MaxNLocator(5))
plt.title("error\nwith centralization")
fig.tight_layout()



#---------------------------------------------------------
#                   without centralization
#---------------------------------------------------------

# compute approximation u of SinCos by solving the Laplace equation
# with the right hand side given by the Laplacian of SinCos
u=P1FEM_periodicConditions.solveLaplace_Torus(Points,Elements,periodicPairs,f,umean=SinSinMean,gridType='general')

# plot approximate solution
fig=plt.figure(4)
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_trisurf(Points[:,0], Points[:,1], u, cmap=cm.jet, linewidth=0)
fig.colorbar(surf)
ax.xaxis.set_major_locator(MaxNLocator(5))
ax.yaxis.set_major_locator(MaxNLocator(6))
ax.zaxis.set_major_locator(MaxNLocator(5))
plt.title("approximate solution\nwithout centralization")
fig.tight_layout()

# Error metrics
firstTriangle= Points[Elements[1,0:3],:]
areaUniform= np.linalg.det(np.vstack(([1,1,1],np.transpose(firstTriangle))))/2
Err=np.linalg.norm(u-trueValsNodes)*np.sqrt(areaUniform)
relErr=np.linalg.norm(u-trueValsNodes)/np.linalg.norm(trueValsNodes)
locErr=np.absolute(u-trueValsNodes)
print("\n\nErrors without centralization\n","Element area:",areaUniform,"\nEuclidean error: ",Err,"\nRelative error: ",relErr,"\nMax. loc. error: ",np.max(locErr),"\n")

# plot local error
fig=plt.figure(5)
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_trisurf(Points[:,0], Points[:,1],locErr , cmap=cm.jet, linewidth=0)
fig.colorbar(surf)
ax.xaxis.set_major_locator(MaxNLocator(5))
ax.yaxis.set_major_locator(MaxNLocator(6))
ax.zaxis.set_major_locator(MaxNLocator(5))
plt.title("error\nwithout centralization")
fig.tight_layout()


#---------------------------------------------------------
#                  alternate mean comp
#---------------------------------------------------------

# compute approximation u of SinCos by solving the Laplace equation
# with the right hand side given by the Laplacian of SinCos
u=P1FEM_periodicConditions.solveLaplace_Torus_alternateMeanComp(Points,Elements,periodicPairs,f,umean=SinSinMean)
v=P1FEM_periodicConditions.solveLaplace_Torus_alternateMeanComp(Points,Elements,periodicPairs,f,umean=SinSinMean)

# plot approximate solution
fig=plt.figure(6)
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_trisurf(Points[:,0], Points[:,1], v, cmap=cm.jet, linewidth=0)
fig.colorbar(surf)
ax.xaxis.set_major_locator(MaxNLocator(5))
ax.yaxis.set_major_locator(MaxNLocator(6))
ax.zaxis.set_major_locator(MaxNLocator(5))
plt.title("approximate solution\nwith alternate mean comp")
fig.tight_layout()

# Error metrics
firstTriangle= Points[Elements[1,0:3],:]
areaUniform= np.linalg.det(np.vstack(([1,1,1],np.transpose(firstTriangle))))/2
Err=np.linalg.norm(u-trueValsNodes)*np.sqrt(areaUniform)
relErr=np.linalg.norm(u-trueValsNodes)/np.linalg.norm(trueValsNodes)
locErr=np.absolute(v-trueValsNodes)
print("\n\nErrors with alternate mean comp\n","Element area:",areaUniform,"\nEuclidean error: ",Err,"\nRelative error: ",relErr,"\nMax. loc. error: ",np.max(locErr),"\n")

# plot local error
fig=plt.figure(7)
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_trisurf(Points[:,0], Points[:,1],locErr , cmap=cm.jet, linewidth=0)
fig.colorbar(surf)
ax.xaxis.set_major_locator(MaxNLocator(5))
ax.yaxis.set_major_locator(MaxNLocator(6))
ax.zaxis.set_major_locator(MaxNLocator(5))
plt.title("error\nwith alternate mean comp")
fig.tight_layout()




plt.show()
